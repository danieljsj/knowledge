=== ROLES FOR DIFFERENT PROCESSES ===

Server Only:
- move all units in database
- record history and knowles

Client <=> Server:
- receive instruction from client/browser
- send data to client/browser

Requirements:
- Same functions available in computation as in client (e.g. node is good fit)
--- b/c we may want browsers to be able to run scenario data like AI when possible.
-- QN: one app, or multiple? A: one app. use




=== KNOWLEDGE DATA ARCHITECTURE ===


there are knowledge segments: each is: a set of observations made by a unit between communications.

each is, perhaps, a story? no, too vague. I like knowledge segments.


you create a knowledgeSegment when the game starts or after you merge knowledge_segments_known references with another unit. 

knowledge_segments - a big fat JSON thing with an ID, recording everything you see.


when you meet, you array merge on your knowledge_segments_known

knowledge_segments
units
->knowledge_segment_ids

so... how to keep myself from running out of Disk space? 
-- reset the game every few months
-- give each knowledge_segment_known a TTL, after which it "dies", and any attemps to reference it result in the removal of the reference from the referencing unit.
---- the TTL, or "wipe date", is based on the time that the knowledge segment "ended", i.e. when its story was first told. (if a unit dies and the story hasn't been told, the knowledge segment goes away.)


there can be different things known, ranging from easy to public (x,y) to insider (hp, mana, ammo).
now, there will be overlaps in knowledge segments known. so when you "compile" them into a literal replay in your replay window, any duplicate knowledge_elements will simply merge their information about that moment. I may have known the HP, you may have known the mana... the replay will now show both.
(note that this continues to assume only truth. though it wouldn't be SUPER hard to include lies, just require a real unit ID, and put markers for conflicting information. but not worht effort now.)


compiling your story is pretty easy - loop over all your knowledge segments, and build a master array of all the data. (hope you've got a lot of memory :-))





=== DATA ARCHITECTURE FOR TERRAIN KNOWLEDGE ===

each unit in DB has a simple map of every square of the map of which it is aware. (terrain can't change.)

first x (col), then y (row)
mapKnown: {
	...
	33: [2,3,4,5,6,7,8],
	34: [1,2,3,4,5,6,7,8,9],
	35: [2,3,4,5,6,7,8],
	...
}

when creating the unit's memory for realtime rendering/AI, it pulls live data from the actual map:
map: { // represents mostly terrain type 1, with a horizontal strip of terray-type 2 at rows 7 and 8 
	...
	33: {2:1, 3:1, 4:1, 5:1, 6:1, 7:2, 8:2},
	34: {2:1, 3:1, 4:1, 5:1, 6:1, 7:2, 8:2},
	35: {2:1, 3:1, 4:1, 5:1, 6:1, 7:2, 8:2},
	...
}






=== REPLAY RENDERING PROCESS ===


during "replay-rendering":
when a position-moment square is placed, it has two values: maybeAppearedHere: true, maybeDisappearedHere: true.
it also modifies those values for adjacent stories: 
- maybeDisappearedHere is set to false if the adjacent story was before the newly placed story
- maybeAppearedHere is set to false if the adjacent story was after the newly placed story


(note, need to do either some funny "orm" hacks or some odm hacks (http://stackoverflow.com/questions/11160955/how-to-exclude-some-fields-from-the-document) so that when I save the unit, I'm not saving all its memories to the database, but rather, just the memory ids that it knows.)